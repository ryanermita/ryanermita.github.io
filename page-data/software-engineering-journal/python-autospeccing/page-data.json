{"componentChunkName":"component---src-templates-blog-post-js","path":"/software-engineering-journal/python-autospeccing","result":{"data":{"markdownRemark":{"html":"<p>While I’m looking for a way to test my function that has a pymysql query, I stumble upon a code snippet with this line.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">@mock.patch(&#39;simple.pymysql&#39;, autospec=True)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>So I took my time to know how this stuff works. Apparently Python has a very good documentation about it.</p>\n<h2>What’s <code class=\"language-text\">autospec=True</code> for?</h2>\n<p>  If you set <code class=\"language-text\">autospec=True</code> then the mock will be created with a spec from the object being replaced. All attributes of the mock will also have the spec of the corresponding attribute of the object being replaced. Methods and functions being mocked will have their arguments checked and will raise a <code class=\"language-text\">TypeError</code> if they are called with the wrong signature. — <a href=\"https://docs.python.org/3.5/library/unittest.mock.html#patch\">Python Patch documentation</a></p>\n<p>To make it short, <code class=\"language-text\">autospec=True</code> creates a mock object with the spec of the object being mocked. It is <code class=\"language-text\">False</code> by default. You can also create a autospecced Mock object using <code class=\"language-text\">create_autospec(spec)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">import unittest\nfrom unittest.mock import patch\n\nclass MyDummyClass:\n\n    def test_dummy_function(self):\n        return &quot;hello&quot;\n\n\nclass TestAutoSpec(unittest.TestCase):\n\n    @patch(&#39;test_func.MyDummyClass&#39;, autospec=True)\n    def test_autospec_true(self, mock_dummy_class):\n        print(dir(mock_dummy_class))\n        pass\n\n    @patch(&#39;test_func.MyDummyClass&#39;)\n    def test_autospec_false(self, mock_dummy_class):\n        print(dir(mock_dummy_class))\n        pass</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The sample test script above will have this output below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">python -m unittest test_func.py -v\ntest_autospec_false (test_func.TestAutoSpec) ... [&#39;assert_any_call&#39;, &#39;assert_called&#39;, &#39;assert_called_once&#39;, &#39;assert_called_once_with&#39;, &#39;assert_called_with&#39;, &#39;assert_has_calls&#39;, &#39;assert_not_called&#39;, &#39;attach_mock&#39;, &#39;call_args&#39;, &#39;call_args_list&#39;, &#39;call_count&#39;, &#39;called&#39;, &#39;configure_mock&#39;, &#39;method_calls&#39;, &#39;mock_add_spec&#39;, &#39;mock_calls&#39;, &#39;reset_mock&#39;, &#39;return_value&#39;, &#39;side_effect&#39;]\nok\ntest_autospec_true (test_func.TestAutoSpec) ... [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;assert_any_call&#39;, &#39;assert_called&#39;, &#39;assert_called_once&#39;, &#39;assert_called_once_with&#39;, &#39;assert_called_with&#39;, &#39;assert_has_calls&#39;, &#39;assert_not_called&#39;, &#39;attach_mock&#39;, &#39;call_args&#39;, &#39;call_args_list&#39;, &#39;call_count&#39;, &#39;called&#39;, &#39;configure_mock&#39;, &#39;method_calls&#39;, &#39;mock_add_spec&#39;, &#39;mock_calls&#39;, &#39;reset_mock&#39;, &#39;return_value&#39;, &#39;side_effect&#39;, &#39;test_dummy_function&#39;]\nok</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can notice with the result, the test method with <code class=\"language-text\">autospec=True</code> has additional <code class=\"language-text\">test_dummy_function</code> and <a href=\"https://dbader.org/blog/python-dunder-methods\">dunder/magic methods</a>. Those additional functions are part of the spec of <code class=\"language-text\">MyDummyClass</code>.</p>\n<h2>Why does autospeccing exist?</h2>\n<p>Based on the Python documentation autospeccing solves these two flaws of Mocking objects.</p>\n<ul>\n<li><strong>Because mocks auto-create attributes on demand</strong>, and allow you to call them with arbitrary arguments, if you misspell one of these assert methods then your assertion is gone.</li>\n<li>The second issue is more general to mocking. If you refactor some of your code, rename members and so on, <strong>any tests for code that is still using the old API but uses mocks instead of the real objects will still pass</strong>. This means your tests can all pass even though your code is broken.</li>\n</ul>\n<p>If Mocking have those flaws and autospeccing solves it. Why not just create Mock objects with <code class=\"language-text\">autospec=True</code> by default instead of <code class=\"language-text\">False</code>? The reason behind this is also written in Python Documentation:</p>\n<p>  This isn’t without caveats and limitations however, which is why it is not the default behaviour. In order to know what attributes are available on the spec object, autospec has to introspect (access attributes) the spec. As you traverse attributes on the mock a corresponding traversal of the original object is happening under the hood. If any of your specced objects have properties or descriptors that can trigger code execution then you may not be able to use autospec. On the other hand it is much better to design your objects so that introspection is safe.</p>\n<p>  A more serious problem is that it is common for instance attributes to be created in the <a href=\"https://docs.python.org/3.5/reference/datamodel.html#object.__init__\"><code class=\"language-text\">__init__()</code></a> method and not to exist on the class at all. <strong>autospec can’t know about any dynamically created attributes and restricts the API to visible attributes.</strong></p>\n<p>This is a simple code snippet that demonstrate the quoted caveat above.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">import unittest\nfrom unittest.mock import patch\n\n\nclass MyDummyClass:\n\n    def __init__(self):\n        self.my_dummy_attribute = &quot;yey!&quot;\n\n    def test_dummy_function(self):\n        return &quot;hello&quot;\n\n\nclass TestAutoSpec(unittest.TestCase):\n\n    @patch(&#39;test_func.MyDummyClass&#39;, autospec=True)\n    def test_autospec_function(self, mock_dummy_class):\n        self.assertTrue(hasattr(mock_dummy_class, &quot;test_dummy_function&quot;))\n\n    @patch(&#39;test_func.MyDummyClass&#39;, autospec=True)\n    def test_autospec_attribute(self, mock_dummy_class):\n        self.assertTrue(hasattr(mock_dummy_class, &quot;test_dummy_attribute&quot;))</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The snippet above will result to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">python -m unittest test_func.py -v\ntest_autospec_attribute (test_func.TestAutoSpec) ... FAIL\ntest_autospec_function (test_func.TestAutoSpec) ... ok\n======================================================================\nFAIL: test_autospec_attribute (test_func.TestAutoSpec)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File &quot;/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/unittest/mock.py&quot;, line 1179, in patched\n    return func(*args, **keywargs)\n  File &quot;/Users/ryan/Workspace/playground/test_func.py&quot;, line 22, in test_autospec_attribute\n    self.assertTrue(hasattr(mock_dummy_class, &quot;test_dummy_attribute&quot;))\nAssertionError: False is not true\n\n----------------------------------------------------------------------\nRan 2 tests in 0.010s\nFAILED (failures=1)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">test_autospec_attribute</code> failed because the mocked object doesn’t know about the <code class=\"language-text\">test_dummy_attribute</code> which is dynamically created in the <code class=\"language-text\">__init__()</code>.</p>\n<h2>Conclusion</h2>\n<p>Autospeccing is a great tool for testing. It minimize the errors caused by misspelling of the methods and making sure our mocked objects are updated based on the changes of the original object which is a great help for refactoring.</p>\n<p>But like any other tools, don't overuse it. Understanding the tools and knowing the applicable use of those tools are utmost important.</p>\n<p>Happy testing!</p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://docs.python.org/3.5/library/unittest.mock.html#autospeccing\">Python Documentation: Autospeccing</a></li>\n<li><a href=\"https://docs.python.org/3.5/library/unittest.mock.html#unittest.mock.create_autospec\">Python Documentation: create_autospec</a></li>\n<li><a href=\"https://stackoverflow.com/questions/35915703/when-using-unittest-mock-patch-why-is-autospec-not-true-by-default\">When using unittest.mock.patch, why is autospec not True by default?</a></li>\n<li><a href=\"https://dbader.org/blog/python-dunder-methods\">Enriching Your Python Classes With Dunder (Magic, Special) Methods</a></li>\n</ul>","excerpt":"While I’m looking for a way to test my function that has a pymysql query, I stumble upon a code snippet with this line. So I took my time to know how this stuff…","frontmatter":{"date":"February 03 , 2019","path":"/software-engineering-journal/python-autospeccing","title":"Python Autospeccing"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{}}}